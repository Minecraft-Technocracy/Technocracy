import org.ajoberstar.grgit.Grgit

buildscript {
    project.ext {
        jvm_target = '1.8'
        kotlin_version = '1.5.20'

        minecraft_version = '1.12.2'
        forge_version = '14.23.5.2855'
        forge_plugin_version = '4.0'
        mappings_version = '20180609-1.12'
        grgit_version = '3.1.1'
        dokka_version = '0.10.1'

        forgelin_version = '1.8.4'
        jei_version = '4.15.0.293'
        zerocore_version = '1.12-0.1.1.0'
        ctm_version = 'MC1.12.2-0.3.3.22'
        waila_version = '1.8.26-B41_1.12.2'
        top_version = '1.12-1.4.28-17'
        cofhcore_version = '1.12.2-4.6.3.27'
        buildcraft_version = '7.99.8.2'

        mod_version = '0.1-alpha6'

        root_build_dir = project.buildDir
    }

    ext.mod_id = 'technocracy.monolith'

    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
        classpath group: 'com.github.Minecraft-Technocracy', name: 'ForgeGradle', version: forge_plugin_version
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-gradle', version: grgit_version
        classpath group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: dokka_version
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.dokka'

allprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.dokka'

    version = project.mod_version
    group = "net.cydhra.technocracy"

    libsDirName = "$root_build_dir/artifacts"

    sourceSets {
        // the api source set creates more problems on compile than it solves, so we just throw it away
        remove api
    }

    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('net.minecraftforge:legacydev') using module(
                        'com.github.Minecraft-Technocracy:legacydev:0.2.4')
            }
        }
    }

    repositories {
        jcenter()
        maven {
            name 'Forgelin Maven Repository'
            url 'https://maven.shadowfacts.net/'
        }
        maven {
            name "JEI Maven Repository"
            url "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            name "zerocore Repository"
            url "http://maven.zerono.it/"
        }
        maven {
            name "chisel Repository"
            url "https://maven.tterrag.com"
        }
        maven {
            name "waila Repository"
            url "http://maven.tehnut.info"
        }
        maven { // CoFH
            name 'CoFH maven'
            url "https://maven.covers1624.net/"
        }
        maven {
            name 'buildcraft Repository'
            url "https://mod-buildcraft.com/maven/"
        }
        maven {
            name 'jitpack'
            url 'https://jitpack.io'
        }
    }

    dependencies {
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: project.kotlin_version
        minecraft group: 'net.minecraftforge', name: 'forge',
                version: "$project.minecraft_version-$project.forge_version"
    }

    minecraft {
        accessTransformer new File(project.rootDir, 'technocracy.foundation/src/main/resources/technocracy_at.cfg')
        accessTransformer new File(project.rootDir, 'technocracy.astronautics/src/main/resources/astronautics_at.cfg')

        mappings channel: 'snapshot', version: mappings_version

        // Run configurations.
        runs {
            client {
                workingDirectory project.file('run')

                //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "$projectDir/build/createSrgToMcp/output.srg"

                // Recommended logging data for a userdev environment
                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // Recommended logging level for the console
                property 'forge.logging.console.level', 'debug'
            }

            server {
                workingDirectory project.file('server')

                // Recommended logging data for a userdev environment
                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // Recommended logging level for the console
                property 'forge.logging.console.level', 'debug'
            }
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = project.jvm_target
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("out")
        }
    }

    dokka {
        outputFormat = 'markdown'
        outputDirectory = "$buildDir/dokka"
    }

    /**
     * This hack hot-fixes not-loading assets until I figure out how to load them properly
     */
    task moveAssets(type: Sync) {
        tasks.processResources.finalizedBy(moveAssets)
        from file("$project.buildDir/resources/main")
        into file("$project.buildDir/classes/kotlin/main")
        preserve {
            exclude "assets/**"
            exclude "mcmod.info"
            exclude "pack.mcmeta"
            exclude "technocracy_at.cfg"
        }
    }
}

project('technocracy.foundation') {
    dependencies {
        // hard mod dependencies
        implementation fg.deobf("net.shadowfacts:Forgelin:$project.forgelin_version")
        // forgelin demands reflect and gradle apparently refuses to load it transitively
        runtimeOnly group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: project.kotlin_version

        // mod dependencies
        compileOnly fg.deobf("it.zerono.mods.zerocore:zerocore:$project.zerocore_version")
        compileOnly fg.deobf("cofh:RedstoneFlux:1.12-+:universal")
        compileOnly fg.deobf("cofh:CoFHCore:${cofhcore_version}:universal") {
            transitive = false
        }
        compileOnly fg.deobf("mezz.jei:jei_$project.minecraft_version:$project.jei_version:api")
        compileOnly fg.deobf("mcp.mobius.waila:Hwyla:$project.waila_version:api")
        compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.12:$project.top_version:api")
        compileOnly fg.deobf("team.chisel.ctm:CTM:$project.ctm_version")
        compileOnly fg.deobf("com.mod-buildcraft:buildcraft-api:$project.buildcraft_version")

        // add soft mods to the runtime environment (this will add the mods at runtime and also apply their ATs to
        // the base minecraft jar)
        runtimeOnly "team.chisel.ctm:CTM:$project.ctm_version"
        runtimeOnly "mezz.jei:jei_$project.minecraft_version:$project.jei_version"
        runtimeOnly "mcjty.theoneprobe:TheOneProbe-1.12:$project.top_version"
        runtimeOnly "it.zerono.mods.zerocore:zerocore:$project.zerocore_version"
        runtimeOnly "cofh:RedstoneFlux:1.12-+:universal"
        runtimeOnly("cofh:CoFHCore:${cofhcore_version}:universal") {
            transitive = false
        }
        // uncomment to enable hwyla in dev environment
        // runtimeOnly "mcp.mobius.waila:Hwyla:$project.waila_version:api"

        implementation project(":technocracy.core")

        if (project.hasProperty('technoblock')) {
            def override = project.getProperty('technoblock')
            println "!> override technoblock with \"$override\""
            implementation files(override)
        } else {
            implementation group: 'com.github.Minecraft-Technocracy', name: 'technoblock', version: '533e16d272'
        }
    }

    jar {
        manifest {
            attributes([
                    'FMLAT'                   : 'technocracy_at.cfg',
                    "Specification-Title"     : "technocracy",
                    "Specification-Vendor"    : "kibisik",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "kibisik",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

project('technocracy.astronautics') {
    dependencies {
        compile project(':technocracy.foundation')
        compile project(':technocracy.core')
    }

    // jar configuration
    jar {
        manifest {
            attributes([
                    'FMLAT'                   : 'astronautics_at.cfg',
                    "Specification-Title"     : "technocracy.astronautics",
                    "Specification-Vendor"    : "kibisik",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "kibisik",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

project('technocracy.core') {
    dependencies {
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: project.kotlin_version
        minecraft group: 'net.minecraftforge', name: 'forge',
                version: "$project.minecraft_version-$project.forge_version"
    }

    jar {
        manifest {
            attributes 'FMLCorePluginContainsFMLMod': 'true',
                    'FMLCorePlugin': 'net.cydhra.technocracy.coremod.TCCorePlugin'
        }
    }
}

project('technocracy.optics') {
    dependencies {
        compile project(':technocracy.foundation')
    }

    // jar configuration
    jar {
        manifest {
            attributes([
                    "Specification-Title"     : "technocracy.optics",
                    "Specification-Vendor"    : "kibisik",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "kibisik",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

project('technocracy.powertools') {
    dependencies {
        compile project(':technocracy.foundation')
        compile project(':technocracy.core')
    }

    // jar configuration
    jar {
        manifest {
            attributes([
                    "Specification-Title"     : "technocracy.powertools",
                    "Specification-Vendor"    : "kibisik",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "kibisik",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

/*
 * MONOLITH CONFIGURATION
 */
configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade(project('technocracy.foundation')) { transitive = false }
    shade(project('technocracy.astronautics')) { transitive = false }
    shade(project('technocracy.optics')) { transitive = false }
    shade(project('technocracy.powertools')) { transitive = false }
    shade(project('technocracy.core')) { transitive = false }

    runtime(project('technocracy.foundation'))
    runtime(project('technocracy.astronautics'))
    runtime(project('technocracy.optics'))
    runtime(project('technocracy.powertools'))
    runtime(project('technocracy.core'))

    compileOnly fg.deobf("net.shadowfacts:Forgelin:$project.forgelin_version")
    compileOnly fg.deobf("mezz.jei:jei_$project.minecraft_version:$project.jei_version:api")
    compileOnly fg.deobf("it.zerono.mods.zerocore:zerocore:$project.zerocore_version")
    compileOnly fg.deobf("team.chisel.ctm:CTM:$project.ctm_version")
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:$project.waila_version:api")
    compileOnly fg.deobf("com.mod-buildcraft:buildcraft-api:$project.buildcraft_version")
    compileOnly fg.deobf("cofh:CoFHCore:${cofhcore_version}:universal") {
        transitive = false // We don't need RF nor JEI, thank you very much
    }
    compileOnly fg.deobf("cofh:RedstoneFlux:1.12-+:universal")
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.12:$project.top_version:api")
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**', 'mcmod.info', 'pack.mcmeta'
        }
    }

    manifest {
        attributes 'FMLAT': 'monolith_at.cfg'
    }
}

task cloneTechnoblock() {
    setGroup("environment")
    def destination = "$projectDir/libs/technoblock"

    doLast {
        if (!file(destination).exists()) {
            Grgit.clone(dir: destination, uri: "https://github.com/Minecraft-Technocracy/Technoblock")
        }
    }
}